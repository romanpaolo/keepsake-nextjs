"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/filters.ts":
/*!************************!*\
  !*** ./lib/filters.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCRTEffect: () => (/* binding */ addCRTEffect),\n/* harmony export */   addScanlines: () => (/* binding */ addScanlines),\n/* harmony export */   applyFilter: () => (/* binding */ applyFilter)\n/* harmony export */ });\nconst applyFilter = (canvas, filter)=>{\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    switch(filter){\n        case \"35mm-film\":\n            apply35mmFilmFilter(data, canvas.width, canvas.height);\n            break;\n        case \"vintage-sepia\":\n            applyVintageSepiaFilter(data, canvas.width, canvas.height);\n            ctx.putImageData(imageData, 0, 0);\n            addSubtleTexture(ctx, canvas.width, canvas.height);\n            return; // Early return since we already put image data\n        case \"bw-minimal\":\n            applyBWMinimalFilter(data);\n            break;\n        case \"bw-v3\":\n            applyBWV3Filter(data);\n            break;\n        case \"kodak-film\":\n            applyKodakFilmFilter(data);\n            break;\n        case \"kodak-portra\":\n            applyKodakPortraFilter(data);\n            break;\n        case \"none\":\n        default:\n            return;\n    }\n    ctx.putImageData(imageData, 0, 0);\n};\n// 35mm Film Filter\n// Based on: Exposure -0.47, Contrast +40, Highlights +23, Shadows -15\n// Clarity -19, Vibrance +13, warm tone\nconst apply35mmFilmFilter = (data, width, height)=>{\n    for(let i = 0; i < data.length; i += 4){\n        let r = data[i];\n        let g = data[i + 1];\n        let b = data[i + 2];\n        // Reduce exposure slightly\n        r *= 0.85;\n        g *= 0.85;\n        b *= 0.85;\n        // Warm tone (add warmth, reduce blue/cyan)\n        r *= 1.12;\n        g *= 1.03;\n        b *= 0.92;\n        // Increase contrast\n        r = ((r / 255 - 0.5) * 1.4 + 0.5) * 255;\n        g = ((g / 255 - 0.5) * 1.4 + 0.5) * 255;\n        b = ((b / 255 - 0.5) * 1.4 + 0.5) * 255;\n        // Boost vibrance (enhance mid-tones)\n        const avg = (r + g + b) / 3;\n        const saturationBoost = 1.13;\n        r = avg + (r - avg) * saturationBoost;\n        g = avg + (g - avg) * saturationBoost;\n        b = avg + (b - avg) * saturationBoost;\n        // Apply tone curve (lift shadows, compress highlights)\n        r = applyToneCurve(r, [\n            [\n                0,\n                0\n            ],\n            [\n                59,\n                62\n            ],\n            [\n                130,\n                127\n            ],\n            [\n                195,\n                197\n            ],\n            [\n                227,\n                228\n            ],\n            [\n                255,\n                255\n            ]\n        ]);\n        g = applyToneCurve(g, [\n            [\n                0,\n                0\n            ],\n            [\n                59,\n                62\n            ],\n            [\n                130,\n                127\n            ],\n            [\n                195,\n                197\n            ],\n            [\n                227,\n                228\n            ],\n            [\n                255,\n                255\n            ]\n        ]);\n        b = applyToneCurve(b, [\n            [\n                0,\n                0\n            ],\n            [\n                59,\n                62\n            ],\n            [\n                130,\n                127\n            ],\n            [\n                195,\n                197\n            ],\n            [\n                227,\n                228\n            ],\n            [\n                255,\n                255\n            ]\n        ]);\n        data[i] = Math.max(0, Math.min(255, r));\n        data[i + 1] = Math.max(0, Math.min(255, g));\n        data[i + 2] = Math.max(0, Math.min(255, b));\n    }\n};\n// Vintage Photobooth Filter\n// Desaturated to near black & white (95% grayscale) with high contrast\n// Matte/faded black levels, sharp details, very subtle warm undertone\n// NOT traditional sepia - this is clean vintage photobooth aesthetic\nconst applyVintageSepiaFilter = (data, width, height)=>{\n    for(let i = 0; i < data.length; i += 4){\n        let r = data[i];\n        let g = data[i + 1];\n        let b = data[i + 2];\n        // 1. Convert to grayscale with slight warm bias\n        const gray = r * 0.35 + g * 0.45 + b * 0.2;\n        // 2. Apply contrast curve (S-curve for punch)\n        let adjusted = gray / 255;\n        // Increase contrast\n        adjusted = (adjusted - 0.5) * 1.3 + 0.5;\n        // Clamp and fade blacks (matte look)\n        if (adjusted < 0.1) {\n            adjusted = adjusted * 0.5 + 0.05; // Lift pure blacks for matte effect\n        }\n        adjusted = Math.max(0, Math.min(1, adjusted)) * 255;\n        // 3. Apply VERY subtle warm tint (5% sepia, 95% grayscale)\n        r = adjusted * 1.01; // Tiny warmth in reds\n        g = adjusted * 0.99; // Neutral greens\n        b = adjusted * 0.96; // Slightly reduced blues\n        // Ensure values stay in range\n        data[i] = Math.min(255, Math.max(0, r));\n        data[i + 1] = Math.min(255, Math.max(0, g));\n        data[i + 2] = Math.min(255, Math.max(0, b));\n    }\n};\n// B&W Minimal Filter\n// Based on: High contrast B&W, Exposure -0.15, Contrast +47\n// Highlights -64, Clarity +16\nconst applyBWMinimalFilter = (data)=>{\n    for(let i = 0; i < data.length; i += 4){\n        const r = data[i];\n        const g = data[i + 1];\n        const b = data[i + 2];\n        // Convert to grayscale with custom weighting\n        let gray = 0.299 * r + 0.587 * g + 0.114 * b;\n        // Reduce exposure\n        gray *= 0.85;\n        // Increase contrast significantly\n        gray = ((gray / 255 - 0.5) * 1.47 + 0.5) * 255;\n        // Crush highlights (compress bright areas)\n        if (gray > 180) {\n            gray = 180 + (gray - 180) * 0.5;\n        }\n        // Add clarity (micro-contrast)\n        const clarity = 1.16;\n        gray = ((gray / 255 - 0.5) * clarity + 0.5) * 255;\n        const final = Math.max(0, Math.min(255, gray));\n        data[i] = final;\n        data[i + 1] = final;\n        data[i + 2] = final;\n    }\n};\n// B&W V3 Filter\n// Based on: Extreme contrast B&W, Exposure -0.27, Contrast +69\n// Highlights -81, Shadows +53, Clarity +34\nconst applyBWV3Filter = (data)=>{\n    for(let i = 0; i < data.length; i += 4){\n        const r = data[i];\n        const g = data[i + 1];\n        const b = data[i + 2];\n        // Convert to grayscale\n        let gray = 0.299 * r + 0.587 * g + 0.114 * b;\n        // Reduce exposure\n        gray *= 0.73;\n        // Extreme contrast\n        gray = ((gray / 255 - 0.5) * 1.69 + 0.5) * 255;\n        // Lift shadows significantly\n        if (gray < 100) {\n            gray = gray + (100 - gray) * 0.53;\n        }\n        // Crush highlights dramatically\n        if (gray > 170) {\n            gray = 170 + (gray - 170) * 0.3;\n        }\n        // Add strong clarity\n        const clarity = 1.34;\n        gray = ((gray / 255 - 0.5) * clarity + 0.5) * 255;\n        const final = Math.max(0, Math.min(255, gray));\n        data[i] = final;\n        data[i + 1] = final;\n        data[i + 2] = final;\n    }\n};\n// Kodak Film Filter\n// Based on: Warm nostalgic film look, Exposure +0.25, Contrast +15\n// Vibrance +22, Saturation +10, warm color grading\nconst applyKodakFilmFilter = (data)=>{\n    for(let i = 0; i < data.length; i += 4){\n        let r = data[i];\n        let g = data[i + 1];\n        let b = data[i + 2];\n        // Increase exposure\n        r *= 1.25;\n        g *= 1.25;\n        b *= 1.25;\n        // Add warm Kodak color cast\n        r *= 1.15;\n        g *= 1.05;\n        b *= 0.93;\n        // Increase contrast moderately\n        r = ((r / 255 - 0.5) * 1.15 + 0.5) * 255;\n        g = ((g / 255 - 0.5) * 1.15 + 0.5) * 255;\n        b = ((b / 255 - 0.5) * 1.15 + 0.5) * 255;\n        // Boost vibrance and saturation\n        const avg = (r + g + b) / 3;\n        const vibranceBoost = 1.22;\n        r = avg + (r - avg) * vibranceBoost * 1.10;\n        g = avg + (g - avg) * vibranceBoost * 1.10;\n        b = avg + (b - avg) * vibranceBoost * 1.10;\n        // Kodak signature warm midtone shift\n        const luminance = (r + g + b) / 3 / 255;\n        if (luminance > 0.3 && luminance < 0.7) {\n            r *= 1.08;\n            g *= 1.03;\n        }\n        data[i] = Math.max(0, Math.min(255, r));\n        data[i + 1] = Math.max(0, Math.min(255, g));\n        data[i + 2] = Math.max(0, Math.min(255, b));\n    }\n};\n// Kodak Portra 400 Filter\n// Based on: Soft, creamy skin tones, Exposure +0.12, Contrast -5\n// Highlights -22, Shadows +18, Vibrance +25, soft pastel look\nconst applyKodakPortraFilter = (data)=>{\n    for(let i = 0; i < data.length; i += 4){\n        let r = data[i];\n        let g = data[i + 1];\n        let b = data[i + 2];\n        // Slight exposure boost\n        r *= 1.12;\n        g *= 1.12;\n        b *= 1.12;\n        // Reduce contrast for soft look\n        r = ((r / 255 - 0.5) * 0.95 + 0.5) * 255;\n        g = ((g / 255 - 0.5) * 0.95 + 0.5) * 255;\n        b = ((b / 255 - 0.5) * 0.95 + 0.5) * 255;\n        // Portra's signature creamy warmth\n        r *= 1.08;\n        g *= 1.04;\n        b *= 0.97;\n        // Lift shadows (open up dark areas)\n        const luminance = (r + g + b) / 3;\n        if (luminance < 100) {\n            const lift = 1.18;\n            r *= lift;\n            g *= lift;\n            b *= lift;\n        }\n        // Pull down highlights (soft, not blown out)\n        if (luminance > 180) {\n            const compress = 0.85;\n            r *= compress;\n            g *= compress;\n            b *= compress;\n        }\n        // Boost vibrance for pastel quality\n        const avg = (r + g + b) / 3;\n        const vibranceBoost = 1.25;\n        r = avg + (r - avg) * vibranceBoost;\n        g = avg + (g - avg) * vibranceBoost;\n        b = avg + (b - avg) * vibranceBoost;\n        // Portra green-magenta shift\n        g *= 1.02;\n        data[i] = Math.max(0, Math.min(255, r));\n        data[i + 1] = Math.max(0, Math.min(255, g));\n        data[i + 2] = Math.max(0, Math.min(255, b));\n    }\n};\n// Helper: Apply tone curve\nconst applyToneCurve = (value, curve)=>{\n    const normalized = value / 255;\n    // Find the two points to interpolate between\n    for(let i = 0; i < curve.length - 1; i++){\n        const [x1, y1] = curve[i];\n        const [x2, y2] = curve[i + 1];\n        const nx1 = x1 / 255;\n        const nx2 = x2 / 255;\n        if (normalized >= nx1 && normalized <= nx2) {\n            // Linear interpolation\n            const t = (normalized - nx1) / (nx2 - nx1);\n            const ny1 = y1 / 255;\n            const ny2 = y2 / 255;\n            const result = ny1 + t * (ny2 - ny1);\n            return result * 255;\n        }\n    }\n    return value;\n};\n// Add vignette effect\nconst addVignette = (ctx, width, height, amount)=>{\n    const imageData = ctx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const maxDist = Math.sqrt(centerX * centerX + centerY * centerY);\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            const idx = (y * width + x) * 4;\n            const dx = x - centerX;\n            const dy = y - centerY;\n            const dist = Math.sqrt(dx * dx + dy * dy);\n            const vignette = 1 - dist / maxDist * amount;\n            data[idx] *= vignette;\n            data[idx + 1] *= vignette;\n            data[idx + 2] *= vignette;\n        }\n    }\n    ctx.putImageData(imageData, 0, 0);\n};\n// Add film grain\nconst addGrain = (ctx, width, height, amount)=>{\n    const imageData = ctx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    const grainStrength = amount / 100;\n    for(let i = 0; i < data.length; i += 4){\n        const grain = (Math.random() - 0.5) * grainStrength * 50;\n        data[i] = Math.max(0, Math.min(255, data[i] + grain));\n        data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + grain));\n        data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + grain));\n    }\n    ctx.putImageData(imageData, 0, 0);\n};\n// Vintage Photobooth Effects\n// Add subtle texture overlay (clean, minimal grain - no heavy effects)\nconst addSubtleTexture = (ctx, width, height)=>{\n    const imageData = ctx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    // Apply very subtle noise using overlay blend mode\n    ctx.globalCompositeOperation = 'overlay';\n    ctx.globalAlpha = 0.02;\n    // Create minimal noise pattern\n    for(let i = 0; i < data.length; i += 4){\n        const noise = Math.random() * 255;\n        data[i] = noise;\n        data[i + 1] = noise;\n        data[i + 2] = noise;\n        data[i + 3] = 255;\n    }\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = width;\n    tempCanvas.height = height;\n    const tempCtx = tempCanvas.getContext('2d');\n    if (tempCtx) {\n        tempCtx.putImageData(imageData, 0, 0);\n        ctx.drawImage(tempCanvas, 0, 0);\n    }\n    // Reset composite operation and alpha\n    ctx.globalCompositeOperation = 'source-over';\n    ctx.globalAlpha = 1.0;\n};\n// CRT and Scanlines effects (kept for compatibility)\nconst addCRTEffect = (canvas)=>{\n// CRT not used in Keepsake presets but keeping for potential future use\n};\nconst addScanlines = (canvas)=>{\n// Scanlines not used in Keepsake presets but keeping for potential future use\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUksR0FBR0EsSUFBSVQsS0FBS1UsTUFBTSxFQUFFRCxLQUFLLEVBQUc7UUFDdkMsTUFBTW1ELFFBQVEzQyxLQUFLd0MsTUFBTSxLQUFLO1FBQzlCekQsSUFBSSxDQUFDUyxFQUFFLEdBQUdtRDtRQUNWNUQsSUFBSSxDQUFDUyxJQUFJLEVBQUUsR0FBR21EO1FBQ2Q1RCxJQUFJLENBQUNTLElBQUksRUFBRSxHQUFHbUQ7UUFDZDVELElBQUksQ0FBQ1MsSUFBSSxFQUFFLEdBQUc7SUFDaEI7SUFFQSxNQUFNb0QsYUFBYUMsU0FBU0MsYUFBYSxDQUFDO0lBQzFDRixXQUFXL0QsS0FBSyxHQUFHQTtJQUNuQitELFdBQVc5RCxNQUFNLEdBQUdBO0lBQ3BCLE1BQU1pRSxVQUFVSCxXQUFXbEUsVUFBVSxDQUFDO0lBQ3RDLElBQUlxRSxTQUFTO1FBQ1hBLFFBQVE3RCxZQUFZLENBQUNQLFdBQVcsR0FBRztRQUNuQ0YsSUFBSXVFLFNBQVMsQ0FBQ0osWUFBWSxHQUFHO0lBQy9CO0lBRUEsc0NBQXNDO0lBQ3RDbkUsSUFBSWdFLHdCQUF3QixHQUFHO0lBQy9CaEUsSUFBSWlFLFdBQVcsR0FBRztBQUNwQjtBQUVBLHFEQUFxRDtBQUM5QyxNQUFNTyxlQUFlLENBQUMxRTtBQUMzQix3RUFBd0U7QUFDMUUsRUFBRTtBQUVLLE1BQU0yRSxlQUFlLENBQUMzRTtBQUMzQiw4RUFBOEU7QUFDaEYsRUFBRSIsInNvdXJjZXMiOlsiL1VzZXJzL3JvbWFuL0RldmVsb3BtZW50L2tlZXBzYWtlL3JldHJvL3JldHJvLWFwcGxlLXBob3RvYm9vdGgvbGliL2ZpbHRlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGhvdG9GaWx0ZXIgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgYXBwbHlGaWx0ZXIgPSAoXG4gIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsXG4gIGZpbHRlcjogUGhvdG9GaWx0ZXJcbik6IHZvaWQgPT4ge1xuICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICBpZiAoIWN0eCkgcmV0dXJuO1xuXG4gIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgY29uc3QgZGF0YSA9IGltYWdlRGF0YS5kYXRhO1xuXG4gIHN3aXRjaCAoZmlsdGVyKSB7XG4gICAgY2FzZSBcIjM1bW0tZmlsbVwiOlxuICAgICAgYXBwbHkzNW1tRmlsbUZpbHRlcihkYXRhLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInZpbnRhZ2Utc2VwaWFcIjpcbiAgICAgIGFwcGx5VmludGFnZVNlcGlhRmlsdGVyKGRhdGEsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG4gICAgICBhZGRTdWJ0bGVUZXh0dXJlKGN0eCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgIHJldHVybjsgLy8gRWFybHkgcmV0dXJuIHNpbmNlIHdlIGFscmVhZHkgcHV0IGltYWdlIGRhdGFcbiAgICBjYXNlIFwiYnctbWluaW1hbFwiOlxuICAgICAgYXBwbHlCV01pbmltYWxGaWx0ZXIoZGF0YSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYnctdjNcIjpcbiAgICAgIGFwcGx5QldWM0ZpbHRlcihkYXRhKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJrb2Rhay1maWxtXCI6XG4gICAgICBhcHBseUtvZGFrRmlsbUZpbHRlcihkYXRhKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJrb2Rhay1wb3J0cmFcIjpcbiAgICAgIGFwcGx5S29kYWtQb3J0cmFGaWx0ZXIoZGF0YSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibm9uZVwiOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm47XG4gIH1cblxuICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG59O1xuXG4vLyAzNW1tIEZpbG0gRmlsdGVyXG4vLyBCYXNlZCBvbjogRXhwb3N1cmUgLTAuNDcsIENvbnRyYXN0ICs0MCwgSGlnaGxpZ2h0cyArMjMsIFNoYWRvd3MgLTE1XG4vLyBDbGFyaXR5IC0xOSwgVmlicmFuY2UgKzEzLCB3YXJtIHRvbmVcbmNvbnN0IGFwcGx5MzVtbUZpbG1GaWx0ZXIgPSAoZGF0YTogVWludDhDbGFtcGVkQXJyYXksIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gNCkge1xuICAgIGxldCByID0gZGF0YVtpXTtcbiAgICBsZXQgZyA9IGRhdGFbaSArIDFdO1xuICAgIGxldCBiID0gZGF0YVtpICsgMl07XG5cbiAgICAvLyBSZWR1Y2UgZXhwb3N1cmUgc2xpZ2h0bHlcbiAgICByICo9IDAuODU7XG4gICAgZyAqPSAwLjg1O1xuICAgIGIgKj0gMC44NTtcblxuICAgIC8vIFdhcm0gdG9uZSAoYWRkIHdhcm10aCwgcmVkdWNlIGJsdWUvY3lhbilcbiAgICByICo9IDEuMTI7XG4gICAgZyAqPSAxLjAzO1xuICAgIGIgKj0gMC45MjtcblxuICAgIC8vIEluY3JlYXNlIGNvbnRyYXN0XG4gICAgciA9ICgociAvIDI1NSAtIDAuNSkgKiAxLjQgKyAwLjUpICogMjU1O1xuICAgIGcgPSAoKGcgLyAyNTUgLSAwLjUpICogMS40ICsgMC41KSAqIDI1NTtcbiAgICBiID0gKChiIC8gMjU1IC0gMC41KSAqIDEuNCArIDAuNSkgKiAyNTU7XG5cbiAgICAvLyBCb29zdCB2aWJyYW5jZSAoZW5oYW5jZSBtaWQtdG9uZXMpXG4gICAgY29uc3QgYXZnID0gKHIgKyBnICsgYikgLyAzO1xuICAgIGNvbnN0IHNhdHVyYXRpb25Cb29zdCA9IDEuMTM7XG4gICAgciA9IGF2ZyArIChyIC0gYXZnKSAqIHNhdHVyYXRpb25Cb29zdDtcbiAgICBnID0gYXZnICsgKGcgLSBhdmcpICogc2F0dXJhdGlvbkJvb3N0O1xuICAgIGIgPSBhdmcgKyAoYiAtIGF2ZykgKiBzYXR1cmF0aW9uQm9vc3Q7XG5cbiAgICAvLyBBcHBseSB0b25lIGN1cnZlIChsaWZ0IHNoYWRvd3MsIGNvbXByZXNzIGhpZ2hsaWdodHMpXG4gICAgciA9IGFwcGx5VG9uZUN1cnZlKHIsIFtcbiAgICAgIFswLCAwXSwgWzU5LCA2Ml0sIFsxMzAsIDEyN10sIFsxOTUsIDE5N10sIFsyMjcsIDIyOF0sIFsyNTUsIDI1NV1cbiAgICBdKTtcbiAgICBnID0gYXBwbHlUb25lQ3VydmUoZywgW1xuICAgICAgWzAsIDBdLCBbNTksIDYyXSwgWzEzMCwgMTI3XSwgWzE5NSwgMTk3XSwgWzIyNywgMjI4XSwgWzI1NSwgMjU1XVxuICAgIF0pO1xuICAgIGIgPSBhcHBseVRvbmVDdXJ2ZShiLCBbXG4gICAgICBbMCwgMF0sIFs1OSwgNjJdLCBbMTMwLCAxMjddLCBbMTk1LCAxOTddLCBbMjI3LCAyMjhdLCBbMjU1LCAyNTVdXG4gICAgXSk7XG5cbiAgICBkYXRhW2ldID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCByKSk7XG4gICAgZGF0YVtpICsgMV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIGcpKTtcbiAgICBkYXRhW2kgKyAyXSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgYikpO1xuICB9XG59O1xuXG4vLyBWaW50YWdlIFBob3RvYm9vdGggRmlsdGVyXG4vLyBEZXNhdHVyYXRlZCB0byBuZWFyIGJsYWNrICYgd2hpdGUgKDk1JSBncmF5c2NhbGUpIHdpdGggaGlnaCBjb250cmFzdFxuLy8gTWF0dGUvZmFkZWQgYmxhY2sgbGV2ZWxzLCBzaGFycCBkZXRhaWxzLCB2ZXJ5IHN1YnRsZSB3YXJtIHVuZGVydG9uZVxuLy8gTk9UIHRyYWRpdGlvbmFsIHNlcGlhIC0gdGhpcyBpcyBjbGVhbiB2aW50YWdlIHBob3RvYm9vdGggYWVzdGhldGljXG5jb25zdCBhcHBseVZpbnRhZ2VTZXBpYUZpbHRlciA9IChkYXRhOiBVaW50OENsYW1wZWRBcnJheSwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgbGV0IHIgPSBkYXRhW2ldO1xuICAgIGxldCBnID0gZGF0YVtpICsgMV07XG4gICAgbGV0IGIgPSBkYXRhW2kgKyAyXTtcblxuICAgIC8vIDEuIENvbnZlcnQgdG8gZ3JheXNjYWxlIHdpdGggc2xpZ2h0IHdhcm0gYmlhc1xuICAgIGNvbnN0IGdyYXkgPSByICogMC4zNSArIGcgKiAwLjQ1ICsgYiAqIDAuMjtcblxuICAgIC8vIDIuIEFwcGx5IGNvbnRyYXN0IGN1cnZlIChTLWN1cnZlIGZvciBwdW5jaClcbiAgICBsZXQgYWRqdXN0ZWQgPSBncmF5IC8gMjU1O1xuXG4gICAgLy8gSW5jcmVhc2UgY29udHJhc3RcbiAgICBhZGp1c3RlZCA9IChhZGp1c3RlZCAtIDAuNSkgKiAxLjMgKyAwLjU7XG5cbiAgICAvLyBDbGFtcCBhbmQgZmFkZSBibGFja3MgKG1hdHRlIGxvb2spXG4gICAgaWYgKGFkanVzdGVkIDwgMC4xKSB7XG4gICAgICBhZGp1c3RlZCA9IGFkanVzdGVkICogMC41ICsgMC4wNTsgLy8gTGlmdCBwdXJlIGJsYWNrcyBmb3IgbWF0dGUgZWZmZWN0XG4gICAgfVxuXG4gICAgYWRqdXN0ZWQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhZGp1c3RlZCkpICogMjU1O1xuXG4gICAgLy8gMy4gQXBwbHkgVkVSWSBzdWJ0bGUgd2FybSB0aW50ICg1JSBzZXBpYSwgOTUlIGdyYXlzY2FsZSlcbiAgICByID0gYWRqdXN0ZWQgKiAxLjAxOyAgLy8gVGlueSB3YXJtdGggaW4gcmVkc1xuICAgIGcgPSBhZGp1c3RlZCAqIDAuOTk7ICAvLyBOZXV0cmFsIGdyZWVuc1xuICAgIGIgPSBhZGp1c3RlZCAqIDAuOTY7ICAvLyBTbGlnaHRseSByZWR1Y2VkIGJsdWVzXG5cbiAgICAvLyBFbnN1cmUgdmFsdWVzIHN0YXkgaW4gcmFuZ2VcbiAgICBkYXRhW2ldID0gTWF0aC5taW4oMjU1LCBNYXRoLm1heCgwLCByKSk7XG4gICAgZGF0YVtpICsgMV0gPSBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIGcpKTtcbiAgICBkYXRhW2kgKyAyXSA9IE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgYikpO1xuICB9XG59O1xuXG4vLyBCJlcgTWluaW1hbCBGaWx0ZXJcbi8vIEJhc2VkIG9uOiBIaWdoIGNvbnRyYXN0IEImVywgRXhwb3N1cmUgLTAuMTUsIENvbnRyYXN0ICs0N1xuLy8gSGlnaGxpZ2h0cyAtNjQsIENsYXJpdHkgKzE2XG5jb25zdCBhcHBseUJXTWluaW1hbEZpbHRlciA9IChkYXRhOiBVaW50OENsYW1wZWRBcnJheSkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICBjb25zdCByID0gZGF0YVtpXTtcbiAgICBjb25zdCBnID0gZGF0YVtpICsgMV07XG4gICAgY29uc3QgYiA9IGRhdGFbaSArIDJdO1xuXG4gICAgLy8gQ29udmVydCB0byBncmF5c2NhbGUgd2l0aCBjdXN0b20gd2VpZ2h0aW5nXG4gICAgbGV0IGdyYXkgPSAwLjI5OSAqIHIgKyAwLjU4NyAqIGcgKyAwLjExNCAqIGI7XG5cbiAgICAvLyBSZWR1Y2UgZXhwb3N1cmVcbiAgICBncmF5ICo9IDAuODU7XG5cbiAgICAvLyBJbmNyZWFzZSBjb250cmFzdCBzaWduaWZpY2FudGx5XG4gICAgZ3JheSA9ICgoZ3JheSAvIDI1NSAtIDAuNSkgKiAxLjQ3ICsgMC41KSAqIDI1NTtcblxuICAgIC8vIENydXNoIGhpZ2hsaWdodHMgKGNvbXByZXNzIGJyaWdodCBhcmVhcylcbiAgICBpZiAoZ3JheSA+IDE4MCkge1xuICAgICAgZ3JheSA9IDE4MCArIChncmF5IC0gMTgwKSAqIDAuNTtcbiAgICB9XG5cbiAgICAvLyBBZGQgY2xhcml0eSAobWljcm8tY29udHJhc3QpXG4gICAgY29uc3QgY2xhcml0eSA9IDEuMTY7XG4gICAgZ3JheSA9ICgoZ3JheSAvIDI1NSAtIDAuNSkgKiBjbGFyaXR5ICsgMC41KSAqIDI1NTtcblxuICAgIGNvbnN0IGZpbmFsID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBncmF5KSk7XG4gICAgZGF0YVtpXSA9IGZpbmFsO1xuICAgIGRhdGFbaSArIDFdID0gZmluYWw7XG4gICAgZGF0YVtpICsgMl0gPSBmaW5hbDtcbiAgfVxufTtcblxuLy8gQiZXIFYzIEZpbHRlclxuLy8gQmFzZWQgb246IEV4dHJlbWUgY29udHJhc3QgQiZXLCBFeHBvc3VyZSAtMC4yNywgQ29udHJhc3QgKzY5XG4vLyBIaWdobGlnaHRzIC04MSwgU2hhZG93cyArNTMsIENsYXJpdHkgKzM0XG5jb25zdCBhcHBseUJXVjNGaWx0ZXIgPSAoZGF0YTogVWludDhDbGFtcGVkQXJyYXkpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgY29uc3QgciA9IGRhdGFbaV07XG4gICAgY29uc3QgZyA9IGRhdGFbaSArIDFdO1xuICAgIGNvbnN0IGIgPSBkYXRhW2kgKyAyXTtcblxuICAgIC8vIENvbnZlcnQgdG8gZ3JheXNjYWxlXG4gICAgbGV0IGdyYXkgPSAwLjI5OSAqIHIgKyAwLjU4NyAqIGcgKyAwLjExNCAqIGI7XG5cbiAgICAvLyBSZWR1Y2UgZXhwb3N1cmVcbiAgICBncmF5ICo9IDAuNzM7XG5cbiAgICAvLyBFeHRyZW1lIGNvbnRyYXN0XG4gICAgZ3JheSA9ICgoZ3JheSAvIDI1NSAtIDAuNSkgKiAxLjY5ICsgMC41KSAqIDI1NTtcblxuICAgIC8vIExpZnQgc2hhZG93cyBzaWduaWZpY2FudGx5XG4gICAgaWYgKGdyYXkgPCAxMDApIHtcbiAgICAgIGdyYXkgPSBncmF5ICsgKDEwMCAtIGdyYXkpICogMC41MztcbiAgICB9XG5cbiAgICAvLyBDcnVzaCBoaWdobGlnaHRzIGRyYW1hdGljYWxseVxuICAgIGlmIChncmF5ID4gMTcwKSB7XG4gICAgICBncmF5ID0gMTcwICsgKGdyYXkgLSAxNzApICogMC4zO1xuICAgIH1cblxuICAgIC8vIEFkZCBzdHJvbmcgY2xhcml0eVxuICAgIGNvbnN0IGNsYXJpdHkgPSAxLjM0O1xuICAgIGdyYXkgPSAoKGdyYXkgLyAyNTUgLSAwLjUpICogY2xhcml0eSArIDAuNSkgKiAyNTU7XG5cbiAgICBjb25zdCBmaW5hbCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgZ3JheSkpO1xuICAgIGRhdGFbaV0gPSBmaW5hbDtcbiAgICBkYXRhW2kgKyAxXSA9IGZpbmFsO1xuICAgIGRhdGFbaSArIDJdID0gZmluYWw7XG4gIH1cbn07XG5cbi8vIEtvZGFrIEZpbG0gRmlsdGVyXG4vLyBCYXNlZCBvbjogV2FybSBub3N0YWxnaWMgZmlsbSBsb29rLCBFeHBvc3VyZSArMC4yNSwgQ29udHJhc3QgKzE1XG4vLyBWaWJyYW5jZSArMjIsIFNhdHVyYXRpb24gKzEwLCB3YXJtIGNvbG9yIGdyYWRpbmdcbmNvbnN0IGFwcGx5S29kYWtGaWxtRmlsdGVyID0gKGRhdGE6IFVpbnQ4Q2xhbXBlZEFycmF5KSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gNCkge1xuICAgIGxldCByID0gZGF0YVtpXTtcbiAgICBsZXQgZyA9IGRhdGFbaSArIDFdO1xuICAgIGxldCBiID0gZGF0YVtpICsgMl07XG5cbiAgICAvLyBJbmNyZWFzZSBleHBvc3VyZVxuICAgIHIgKj0gMS4yNTtcbiAgICBnICo9IDEuMjU7XG4gICAgYiAqPSAxLjI1O1xuXG4gICAgLy8gQWRkIHdhcm0gS29kYWsgY29sb3IgY2FzdFxuICAgIHIgKj0gMS4xNTtcbiAgICBnICo9IDEuMDU7XG4gICAgYiAqPSAwLjkzO1xuXG4gICAgLy8gSW5jcmVhc2UgY29udHJhc3QgbW9kZXJhdGVseVxuICAgIHIgPSAoKHIgLyAyNTUgLSAwLjUpICogMS4xNSArIDAuNSkgKiAyNTU7XG4gICAgZyA9ICgoZyAvIDI1NSAtIDAuNSkgKiAxLjE1ICsgMC41KSAqIDI1NTtcbiAgICBiID0gKChiIC8gMjU1IC0gMC41KSAqIDEuMTUgKyAwLjUpICogMjU1O1xuXG4gICAgLy8gQm9vc3QgdmlicmFuY2UgYW5kIHNhdHVyYXRpb25cbiAgICBjb25zdCBhdmcgPSAociArIGcgKyBiKSAvIDM7XG4gICAgY29uc3QgdmlicmFuY2VCb29zdCA9IDEuMjI7XG4gICAgciA9IGF2ZyArIChyIC0gYXZnKSAqIHZpYnJhbmNlQm9vc3QgKiAxLjEwO1xuICAgIGcgPSBhdmcgKyAoZyAtIGF2ZykgKiB2aWJyYW5jZUJvb3N0ICogMS4xMDtcbiAgICBiID0gYXZnICsgKGIgLSBhdmcpICogdmlicmFuY2VCb29zdCAqIDEuMTA7XG5cbiAgICAvLyBLb2RhayBzaWduYXR1cmUgd2FybSBtaWR0b25lIHNoaWZ0XG4gICAgY29uc3QgbHVtaW5hbmNlID0gKHIgKyBnICsgYikgLyAzIC8gMjU1O1xuICAgIGlmIChsdW1pbmFuY2UgPiAwLjMgJiYgbHVtaW5hbmNlIDwgMC43KSB7XG4gICAgICByICo9IDEuMDg7XG4gICAgICBnICo9IDEuMDM7XG4gICAgfVxuXG4gICAgZGF0YVtpXSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgcikpO1xuICAgIGRhdGFbaSArIDFdID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBnKSk7XG4gICAgZGF0YVtpICsgMl0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIGIpKTtcbiAgfVxufTtcblxuLy8gS29kYWsgUG9ydHJhIDQwMCBGaWx0ZXJcbi8vIEJhc2VkIG9uOiBTb2Z0LCBjcmVhbXkgc2tpbiB0b25lcywgRXhwb3N1cmUgKzAuMTIsIENvbnRyYXN0IC01XG4vLyBIaWdobGlnaHRzIC0yMiwgU2hhZG93cyArMTgsIFZpYnJhbmNlICsyNSwgc29mdCBwYXN0ZWwgbG9va1xuY29uc3QgYXBwbHlLb2Rha1BvcnRyYUZpbHRlciA9IChkYXRhOiBVaW50OENsYW1wZWRBcnJheSkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICBsZXQgciA9IGRhdGFbaV07XG4gICAgbGV0IGcgPSBkYXRhW2kgKyAxXTtcbiAgICBsZXQgYiA9IGRhdGFbaSArIDJdO1xuXG4gICAgLy8gU2xpZ2h0IGV4cG9zdXJlIGJvb3N0XG4gICAgciAqPSAxLjEyO1xuICAgIGcgKj0gMS4xMjtcbiAgICBiICo9IDEuMTI7XG5cbiAgICAvLyBSZWR1Y2UgY29udHJhc3QgZm9yIHNvZnQgbG9va1xuICAgIHIgPSAoKHIgLyAyNTUgLSAwLjUpICogMC45NSArIDAuNSkgKiAyNTU7XG4gICAgZyA9ICgoZyAvIDI1NSAtIDAuNSkgKiAwLjk1ICsgMC41KSAqIDI1NTtcbiAgICBiID0gKChiIC8gMjU1IC0gMC41KSAqIDAuOTUgKyAwLjUpICogMjU1O1xuXG4gICAgLy8gUG9ydHJhJ3Mgc2lnbmF0dXJlIGNyZWFteSB3YXJtdGhcbiAgICByICo9IDEuMDg7XG4gICAgZyAqPSAxLjA0O1xuICAgIGIgKj0gMC45NztcblxuICAgIC8vIExpZnQgc2hhZG93cyAob3BlbiB1cCBkYXJrIGFyZWFzKVxuICAgIGNvbnN0IGx1bWluYW5jZSA9IChyICsgZyArIGIpIC8gMztcbiAgICBpZiAobHVtaW5hbmNlIDwgMTAwKSB7XG4gICAgICBjb25zdCBsaWZ0ID0gMS4xODtcbiAgICAgIHIgKj0gbGlmdDtcbiAgICAgIGcgKj0gbGlmdDtcbiAgICAgIGIgKj0gbGlmdDtcbiAgICB9XG5cbiAgICAvLyBQdWxsIGRvd24gaGlnaGxpZ2h0cyAoc29mdCwgbm90IGJsb3duIG91dClcbiAgICBpZiAobHVtaW5hbmNlID4gMTgwKSB7XG4gICAgICBjb25zdCBjb21wcmVzcyA9IDAuODU7XG4gICAgICByICo9IGNvbXByZXNzO1xuICAgICAgZyAqPSBjb21wcmVzcztcbiAgICAgIGIgKj0gY29tcHJlc3M7XG4gICAgfVxuXG4gICAgLy8gQm9vc3QgdmlicmFuY2UgZm9yIHBhc3RlbCBxdWFsaXR5XG4gICAgY29uc3QgYXZnID0gKHIgKyBnICsgYikgLyAzO1xuICAgIGNvbnN0IHZpYnJhbmNlQm9vc3QgPSAxLjI1O1xuICAgIHIgPSBhdmcgKyAociAtIGF2ZykgKiB2aWJyYW5jZUJvb3N0O1xuICAgIGcgPSBhdmcgKyAoZyAtIGF2ZykgKiB2aWJyYW5jZUJvb3N0O1xuICAgIGIgPSBhdmcgKyAoYiAtIGF2ZykgKiB2aWJyYW5jZUJvb3N0O1xuXG4gICAgLy8gUG9ydHJhIGdyZWVuLW1hZ2VudGEgc2hpZnRcbiAgICBnICo9IDEuMDI7XG5cbiAgICBkYXRhW2ldID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCByKSk7XG4gICAgZGF0YVtpICsgMV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIGcpKTtcbiAgICBkYXRhW2kgKyAyXSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgYikpO1xuICB9XG59O1xuXG4vLyBIZWxwZXI6IEFwcGx5IHRvbmUgY3VydmVcbmNvbnN0IGFwcGx5VG9uZUN1cnZlID0gKHZhbHVlOiBudW1iZXIsIGN1cnZlOiBudW1iZXJbXVtdKTogbnVtYmVyID0+IHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IHZhbHVlIC8gMjU1O1xuXG4gIC8vIEZpbmQgdGhlIHR3byBwb2ludHMgdG8gaW50ZXJwb2xhdGUgYmV0d2VlblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnZlLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGNvbnN0IFt4MSwgeTFdID0gY3VydmVbaV07XG4gICAgY29uc3QgW3gyLCB5Ml0gPSBjdXJ2ZVtpICsgMV07XG5cbiAgICBjb25zdCBueDEgPSB4MSAvIDI1NTtcbiAgICBjb25zdCBueDIgPSB4MiAvIDI1NTtcblxuICAgIGlmIChub3JtYWxpemVkID49IG54MSAmJiBub3JtYWxpemVkIDw9IG54Mikge1xuICAgICAgLy8gTGluZWFyIGludGVycG9sYXRpb25cbiAgICAgIGNvbnN0IHQgPSAobm9ybWFsaXplZCAtIG54MSkgLyAobngyIC0gbngxKTtcbiAgICAgIGNvbnN0IG55MSA9IHkxIC8gMjU1O1xuICAgICAgY29uc3QgbnkyID0geTIgLyAyNTU7XG4gICAgICBjb25zdCByZXN1bHQgPSBueTEgKyB0ICogKG55MiAtIG55MSk7XG4gICAgICByZXR1cm4gcmVzdWx0ICogMjU1O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8vIEFkZCB2aWduZXR0ZSBlZmZlY3RcbmNvbnN0IGFkZFZpZ25ldHRlID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgYW1vdW50OiBudW1iZXIpID0+IHtcbiAgY29uc3QgaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgY29uc3QgZGF0YSA9IGltYWdlRGF0YS5kYXRhO1xuICBjb25zdCBjZW50ZXJYID0gd2lkdGggLyAyO1xuICBjb25zdCBjZW50ZXJZID0gaGVpZ2h0IC8gMjtcbiAgY29uc3QgbWF4RGlzdCA9IE1hdGguc3FydChjZW50ZXJYICogY2VudGVyWCArIGNlbnRlclkgKiBjZW50ZXJZKTtcblxuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBjb25zdCBpZHggPSAoeSAqIHdpZHRoICsgeCkgKiA0O1xuICAgICAgY29uc3QgZHggPSB4IC0gY2VudGVyWDtcbiAgICAgIGNvbnN0IGR5ID0geSAtIGNlbnRlclk7XG4gICAgICBjb25zdCBkaXN0ID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgIGNvbnN0IHZpZ25ldHRlID0gMSAtIChkaXN0IC8gbWF4RGlzdCkgKiBhbW91bnQ7XG5cbiAgICAgIGRhdGFbaWR4XSAqPSB2aWduZXR0ZTtcbiAgICAgIGRhdGFbaWR4ICsgMV0gKj0gdmlnbmV0dGU7XG4gICAgICBkYXRhW2lkeCArIDJdICo9IHZpZ25ldHRlO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcbn07XG5cbi8vIEFkZCBmaWxtIGdyYWluXG5jb25zdCBhZGRHcmFpbiA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGFtb3VudDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gIGNvbnN0IGRhdGEgPSBpbWFnZURhdGEuZGF0YTtcbiAgY29uc3QgZ3JhaW5TdHJlbmd0aCA9IGFtb3VudCAvIDEwMDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICBjb25zdCBncmFpbiA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIGdyYWluU3RyZW5ndGggKiA1MDtcbiAgICBkYXRhW2ldID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBkYXRhW2ldICsgZ3JhaW4pKTtcbiAgICBkYXRhW2kgKyAxXSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgZGF0YVtpICsgMV0gKyBncmFpbikpO1xuICAgIGRhdGFbaSArIDJdID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBkYXRhW2kgKyAyXSArIGdyYWluKSk7XG4gIH1cblxuICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG59O1xuXG4vLyBWaW50YWdlIFBob3RvYm9vdGggRWZmZWN0c1xuXG4vLyBBZGQgc3VidGxlIHRleHR1cmUgb3ZlcmxheSAoY2xlYW4sIG1pbmltYWwgZ3JhaW4gLSBubyBoZWF2eSBlZmZlY3RzKVxuY29uc3QgYWRkU3VidGxlVGV4dHVyZSA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHtcbiAgY29uc3QgaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgY29uc3QgZGF0YSA9IGltYWdlRGF0YS5kYXRhO1xuXG4gIC8vIEFwcGx5IHZlcnkgc3VidGxlIG5vaXNlIHVzaW5nIG92ZXJsYXkgYmxlbmQgbW9kZVxuICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ292ZXJsYXknO1xuICBjdHguZ2xvYmFsQWxwaGEgPSAwLjAyO1xuXG4gIC8vIENyZWF0ZSBtaW5pbWFsIG5vaXNlIHBhdHRlcm5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgY29uc3Qgbm9pc2UgPSBNYXRoLnJhbmRvbSgpICogMjU1O1xuICAgIGRhdGFbaV0gPSBub2lzZTtcbiAgICBkYXRhW2kgKyAxXSA9IG5vaXNlO1xuICAgIGRhdGFbaSArIDJdID0gbm9pc2U7XG4gICAgZGF0YVtpICsgM10gPSAyNTU7XG4gIH1cblxuICBjb25zdCB0ZW1wQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIHRlbXBDYW52YXMud2lkdGggPSB3aWR0aDtcbiAgdGVtcENhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gIGNvbnN0IHRlbXBDdHggPSB0ZW1wQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIGlmICh0ZW1wQ3R4KSB7XG4gICAgdGVtcEN0eC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICBjdHguZHJhd0ltYWdlKHRlbXBDYW52YXMsIDAsIDApO1xuICB9XG5cbiAgLy8gUmVzZXQgY29tcG9zaXRlIG9wZXJhdGlvbiBhbmQgYWxwaGFcbiAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XG4gIGN0eC5nbG9iYWxBbHBoYSA9IDEuMDtcbn07XG5cbi8vIENSVCBhbmQgU2NhbmxpbmVzIGVmZmVjdHMgKGtlcHQgZm9yIGNvbXBhdGliaWxpdHkpXG5leHBvcnQgY29uc3QgYWRkQ1JURWZmZWN0ID0gKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpOiB2b2lkID0+IHtcbiAgLy8gQ1JUIG5vdCB1c2VkIGluIEtlZXBzYWtlIHByZXNldHMgYnV0IGtlZXBpbmcgZm9yIHBvdGVudGlhbCBmdXR1cmUgdXNlXG59O1xuXG5leHBvcnQgY29uc3QgYWRkU2NhbmxpbmVzID0gKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpOiB2b2lkID0+IHtcbiAgLy8gU2NhbmxpbmVzIG5vdCB1c2VkIGluIEtlZXBzYWtlIHByZXNldHMgYnV0IGtlZXBpbmcgZm9yIHBvdGVudGlhbCBmdXR1cmUgdXNlXG59O1xuIl0sIm5hbWVzIjpbImFwcGx5RmlsdGVyIiwiY2FudmFzIiwiZmlsdGVyIiwiY3R4IiwiZ2V0Q29udGV4dCIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsIndpZHRoIiwiaGVpZ2h0IiwiZGF0YSIsImFwcGx5MzVtbUZpbG1GaWx0ZXIiLCJhcHBseVZpbnRhZ2VTZXBpYUZpbHRlciIsInB1dEltYWdlRGF0YSIsImFkZFN1YnRsZVRleHR1cmUiLCJhcHBseUJXTWluaW1hbEZpbHRlciIsImFwcGx5QldWM0ZpbHRlciIsImFwcGx5S29kYWtGaWxtRmlsdGVyIiwiYXBwbHlLb2Rha1BvcnRyYUZpbHRlciIsImkiLCJsZW5ndGgiLCJyIiwiZyIsImIiLCJhdmciLCJzYXR1cmF0aW9uQm9vc3QiLCJhcHBseVRvbmVDdXJ2ZSIsIk1hdGgiLCJtYXgiLCJtaW4iLCJncmF5IiwiYWRqdXN0ZWQiLCJjbGFyaXR5IiwiZmluYWwiLCJ2aWJyYW5jZUJvb3N0IiwibHVtaW5hbmNlIiwibGlmdCIsImNvbXByZXNzIiwidmFsdWUiLCJjdXJ2ZSIsIm5vcm1hbGl6ZWQiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIm54MSIsIm54MiIsInQiLCJueTEiLCJueTIiLCJyZXN1bHQiLCJhZGRWaWduZXR0ZSIsImFtb3VudCIsImNlbnRlclgiLCJjZW50ZXJZIiwibWF4RGlzdCIsInNxcnQiLCJ5IiwieCIsImlkeCIsImR4IiwiZHkiLCJkaXN0IiwidmlnbmV0dGUiLCJhZGRHcmFpbiIsImdyYWluU3RyZW5ndGgiLCJncmFpbiIsInJhbmRvbSIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImdsb2JhbEFscGhhIiwibm9pc2UiLCJ0ZW1wQ2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGVtcEN0eCIsImRyYXdJbWFnZSIsImFkZENSVEVmZmVjdCIsImFkZFNjYW5saW5lcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/filters.ts\n"));

/***/ })

});