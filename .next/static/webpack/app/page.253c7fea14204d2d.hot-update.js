"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/filters.ts":
/*!************************!*\
  !*** ./lib/filters.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCRTEffect: () => (/* binding */ addCRTEffect),\n/* harmony export */   addScanlines: () => (/* binding */ addScanlines),\n/* harmony export */   applyFilter: () => (/* binding */ applyFilter)\n/* harmony export */ });\nconst applyFilter = (canvas, filter)=>{\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    switch(filter){\n        case \"35mm-film\":\n            apply35mmFilmFilter(data, canvas.width, canvas.height);\n            break;\n        case \"vintage-sepia\":\n            applyVintageSepiaFilter(data, canvas.width, canvas.height);\n            ctx.putImageData(imageData, 0, 0);\n            addSubtleTexture(ctx, canvas.width, canvas.height);\n            return; // Early return since we already put image data\n        case \"bw-minimal\":\n            applyBWMinimalFilter(data);\n            break;\n        case \"bw-v3\":\n            applyBWV3Filter(data);\n            break;\n        case \"kodak-film\":\n            applyKodakFilmFilter(data);\n            break;\n        case \"kodak-portra\":\n            applyKodakPortraFilter(data);\n            break;\n        case \"none\":\n        default:\n            return;\n    }\n    ctx.putImageData(imageData, 0, 0);\n};\n// 35mm Film Filter\n// Based on: Exposure -0.47, Contrast +40, Highlights +23, Shadows -15\n// Clarity -19, Vibrance +13, warm tone\nconst apply35mmFilmFilter = (data, width, height)=>{\n    for(let i = 0; i < data.length; i += 4){\n        let r = data[i];\n        let g = data[i + 1];\n        let b = data[i + 2];\n        // Reduce exposure slightly\n        r *= 0.85;\n        g *= 0.85;\n        b *= 0.85;\n        // Warm tone (add warmth, reduce blue/cyan)\n        r *= 1.12;\n        g *= 1.03;\n        b *= 0.92;\n        // Increase contrast\n        r = ((r / 255 - 0.5) * 1.4 + 0.5) * 255;\n        g = ((g / 255 - 0.5) * 1.4 + 0.5) * 255;\n        b = ((b / 255 - 0.5) * 1.4 + 0.5) * 255;\n        // Boost vibrance (enhance mid-tones)\n        const avg = (r + g + b) / 3;\n        const saturationBoost = 1.13;\n        r = avg + (r - avg) * saturationBoost;\n        g = avg + (g - avg) * saturationBoost;\n        b = avg + (b - avg) * saturationBoost;\n        // Apply tone curve (lift shadows, compress highlights)\n        r = applyToneCurve(r, [\n            [\n                0,\n                0\n            ],\n            [\n                59,\n                62\n            ],\n            [\n                130,\n                127\n            ],\n            [\n                195,\n                197\n            ],\n            [\n                227,\n                228\n            ],\n            [\n                255,\n                255\n            ]\n        ]);\n        g = applyToneCurve(g, [\n            [\n                0,\n                0\n            ],\n            [\n                59,\n                62\n            ],\n            [\n                130,\n                127\n            ],\n            [\n                195,\n                197\n            ],\n            [\n                227,\n                228\n            ],\n            [\n                255,\n                255\n            ]\n        ]);\n        b = applyToneCurve(b, [\n            [\n                0,\n                0\n            ],\n            [\n                59,\n                62\n            ],\n            [\n                130,\n                127\n            ],\n            [\n                195,\n                197\n            ],\n            [\n                227,\n                228\n            ],\n            [\n                255,\n                255\n            ]\n        ]);\n        data[i] = Math.max(0, Math.min(255, r));\n        data[i + 1] = Math.max(0, Math.min(255, g));\n        data[i + 2] = Math.max(0, Math.min(255, b));\n    }\n};\n// Vintage Photobooth Filter\n// True sepia/brown tones like classic photobooth strips\n// Strong warm coloring with high contrast and matte blacks\nconst applyVintageSepiaFilter = (data, width, height)=>{\n    for(let i = 0; i < data.length; i += 4){\n        let r = data[i];\n        let g = data[i + 1];\n        let b = data[i + 2];\n        // 1. Standard grayscale conversion\n        const gray = r * 0.299 + g * 0.587 + b * 0.114;\n        // 2. Apply contrast adjustment\n        let adjusted = ((gray / 255 - 0.5) * 1.2 + 0.5) * 255;\n        // Lift blacks for vintage matte feel\n        if (adjusted < 30) {\n            adjusted = adjusted * 0.7 + 15;\n        }\n        adjusted = Math.max(0, Math.min(255, adjusted));\n        // 3. Apply TRUE SEPIA TONE (classic brown photobooth color)\n        // This creates the brown/beige tone, not just subtle warmth\n        r = Math.min(255, adjusted + 40); // Add brown to reds\n        g = Math.min(255, adjusted * 0.85 + 20); // Less green\n        b = Math.max(0, adjusted * 0.65); // Much less blue for brown tone\n        data[i] = Math.max(0, Math.min(255, r));\n        data[i + 1] = Math.max(0, Math.min(255, g));\n        data[i + 2] = Math.max(0, Math.min(255, b));\n    }\n};\n// B&W Minimal Filter\n// Based on: High contrast B&W, Exposure -0.15, Contrast +47\n// Highlights -64, Clarity +16\nconst applyBWMinimalFilter = (data)=>{\n    for(let i = 0; i < data.length; i += 4){\n        const r = data[i];\n        const g = data[i + 1];\n        const b = data[i + 2];\n        // Convert to grayscale with custom weighting\n        let gray = 0.299 * r + 0.587 * g + 0.114 * b;\n        // Reduce exposure\n        gray *= 0.85;\n        // Increase contrast significantly\n        gray = ((gray / 255 - 0.5) * 1.47 + 0.5) * 255;\n        // Crush highlights (compress bright areas)\n        if (gray > 180) {\n            gray = 180 + (gray - 180) * 0.5;\n        }\n        // Add clarity (micro-contrast)\n        const clarity = 1.16;\n        gray = ((gray / 255 - 0.5) * clarity + 0.5) * 255;\n        const final = Math.max(0, Math.min(255, gray));\n        data[i] = final;\n        data[i + 1] = final;\n        data[i + 2] = final;\n    }\n};\n// B&W V3 Filter\n// Based on: Extreme contrast B&W, Exposure -0.27, Contrast +69\n// Highlights -81, Shadows +53, Clarity +34\nconst applyBWV3Filter = (data)=>{\n    for(let i = 0; i < data.length; i += 4){\n        const r = data[i];\n        const g = data[i + 1];\n        const b = data[i + 2];\n        // Convert to grayscale\n        let gray = 0.299 * r + 0.587 * g + 0.114 * b;\n        // Reduce exposure\n        gray *= 0.73;\n        // Extreme contrast\n        gray = ((gray / 255 - 0.5) * 1.69 + 0.5) * 255;\n        // Lift shadows significantly\n        if (gray < 100) {\n            gray = gray + (100 - gray) * 0.53;\n        }\n        // Crush highlights dramatically\n        if (gray > 170) {\n            gray = 170 + (gray - 170) * 0.3;\n        }\n        // Add strong clarity\n        const clarity = 1.34;\n        gray = ((gray / 255 - 0.5) * clarity + 0.5) * 255;\n        const final = Math.max(0, Math.min(255, gray));\n        data[i] = final;\n        data[i + 1] = final;\n        data[i + 2] = final;\n    }\n};\n// Kodak Film Filter\n// Based on: Warm nostalgic film look, Exposure +0.25, Contrast +15\n// Vibrance +22, Saturation +10, warm color grading\nconst applyKodakFilmFilter = (data)=>{\n    for(let i = 0; i < data.length; i += 4){\n        let r = data[i];\n        let g = data[i + 1];\n        let b = data[i + 2];\n        // Increase exposure\n        r *= 1.25;\n        g *= 1.25;\n        b *= 1.25;\n        // Add warm Kodak color cast\n        r *= 1.15;\n        g *= 1.05;\n        b *= 0.93;\n        // Increase contrast moderately\n        r = ((r / 255 - 0.5) * 1.15 + 0.5) * 255;\n        g = ((g / 255 - 0.5) * 1.15 + 0.5) * 255;\n        b = ((b / 255 - 0.5) * 1.15 + 0.5) * 255;\n        // Boost vibrance and saturation\n        const avg = (r + g + b) / 3;\n        const vibranceBoost = 1.22;\n        r = avg + (r - avg) * vibranceBoost * 1.10;\n        g = avg + (g - avg) * vibranceBoost * 1.10;\n        b = avg + (b - avg) * vibranceBoost * 1.10;\n        // Kodak signature warm midtone shift\n        const luminance = (r + g + b) / 3 / 255;\n        if (luminance > 0.3 && luminance < 0.7) {\n            r *= 1.08;\n            g *= 1.03;\n        }\n        data[i] = Math.max(0, Math.min(255, r));\n        data[i + 1] = Math.max(0, Math.min(255, g));\n        data[i + 2] = Math.max(0, Math.min(255, b));\n    }\n};\n// Kodak Portra 400 Filter\n// Based on: Soft, creamy skin tones, Exposure +0.12, Contrast -5\n// Highlights -22, Shadows +18, Vibrance +25, soft pastel look\nconst applyKodakPortraFilter = (data)=>{\n    for(let i = 0; i < data.length; i += 4){\n        let r = data[i];\n        let g = data[i + 1];\n        let b = data[i + 2];\n        // Slight exposure boost\n        r *= 1.12;\n        g *= 1.12;\n        b *= 1.12;\n        // Reduce contrast for soft look\n        r = ((r / 255 - 0.5) * 0.95 + 0.5) * 255;\n        g = ((g / 255 - 0.5) * 0.95 + 0.5) * 255;\n        b = ((b / 255 - 0.5) * 0.95 + 0.5) * 255;\n        // Portra's signature creamy warmth\n        r *= 1.08;\n        g *= 1.04;\n        b *= 0.97;\n        // Lift shadows (open up dark areas)\n        const luminance = (r + g + b) / 3;\n        if (luminance < 100) {\n            const lift = 1.18;\n            r *= lift;\n            g *= lift;\n            b *= lift;\n        }\n        // Pull down highlights (soft, not blown out)\n        if (luminance > 180) {\n            const compress = 0.85;\n            r *= compress;\n            g *= compress;\n            b *= compress;\n        }\n        // Boost vibrance for pastel quality\n        const avg = (r + g + b) / 3;\n        const vibranceBoost = 1.25;\n        r = avg + (r - avg) * vibranceBoost;\n        g = avg + (g - avg) * vibranceBoost;\n        b = avg + (b - avg) * vibranceBoost;\n        // Portra green-magenta shift\n        g *= 1.02;\n        data[i] = Math.max(0, Math.min(255, r));\n        data[i + 1] = Math.max(0, Math.min(255, g));\n        data[i + 2] = Math.max(0, Math.min(255, b));\n    }\n};\n// Helper: Apply tone curve\nconst applyToneCurve = (value, curve)=>{\n    const normalized = value / 255;\n    // Find the two points to interpolate between\n    for(let i = 0; i < curve.length - 1; i++){\n        const [x1, y1] = curve[i];\n        const [x2, y2] = curve[i + 1];\n        const nx1 = x1 / 255;\n        const nx2 = x2 / 255;\n        if (normalized >= nx1 && normalized <= nx2) {\n            // Linear interpolation\n            const t = (normalized - nx1) / (nx2 - nx1);\n            const ny1 = y1 / 255;\n            const ny2 = y2 / 255;\n            const result = ny1 + t * (ny2 - ny1);\n            return result * 255;\n        }\n    }\n    return value;\n};\n// Add vignette effect\nconst addVignette = (ctx, width, height, amount)=>{\n    const imageData = ctx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const maxDist = Math.sqrt(centerX * centerX + centerY * centerY);\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            const idx = (y * width + x) * 4;\n            const dx = x - centerX;\n            const dy = y - centerY;\n            const dist = Math.sqrt(dx * dx + dy * dy);\n            const vignette = 1 - dist / maxDist * amount;\n            data[idx] *= vignette;\n            data[idx + 1] *= vignette;\n            data[idx + 2] *= vignette;\n        }\n    }\n    ctx.putImageData(imageData, 0, 0);\n};\n// Add film grain\nconst addGrain = (ctx, width, height, amount)=>{\n    const imageData = ctx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    const grainStrength = amount / 100;\n    for(let i = 0; i < data.length; i += 4){\n        const grain = (Math.random() - 0.5) * grainStrength * 50;\n        data[i] = Math.max(0, Math.min(255, data[i] + grain));\n        data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + grain));\n        data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + grain));\n    }\n    ctx.putImageData(imageData, 0, 0);\n};\n// Vintage Photobooth Effects\n// Add subtle texture overlay (clean, minimal grain - no heavy effects)\nconst addSubtleTexture = (ctx, width, height)=>{\n    const imageData = ctx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    // Apply very subtle noise using overlay blend mode\n    ctx.globalCompositeOperation = 'overlay';\n    ctx.globalAlpha = 0.02;\n    // Create minimal noise pattern\n    for(let i = 0; i < data.length; i += 4){\n        const noise = Math.random() * 255;\n        data[i] = noise;\n        data[i + 1] = noise;\n        data[i + 2] = noise;\n        data[i + 3] = 255;\n    }\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = width;\n    tempCanvas.height = height;\n    const tempCtx = tempCanvas.getContext('2d');\n    if (tempCtx) {\n        tempCtx.putImageData(imageData, 0, 0);\n        ctx.drawImage(tempCanvas, 0, 0);\n    }\n    // Reset composite operation and alpha\n    ctx.globalCompositeOperation = 'source-over';\n    ctx.globalAlpha = 1.0;\n};\n// CRT and Scanlines effects (kept for compatibility)\nconst addCRTEffect = (canvas)=>{\n// CRT not used in Keepsake presets but keeping for potential future use\n};\nconst addScanlines = (canvas)=>{\n// Scanlines not used in Keepsake presets but keeping for potential future use\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/filters.ts\n"));

/***/ })

});