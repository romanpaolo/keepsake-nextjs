"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPhotoStrip: () => (/* binding */ createPhotoStrip),\n/* harmony export */   downloadImage: () => (/* binding */ downloadImage),\n/* harmony export */   generatePhotoId: () => (/* binding */ generatePhotoId),\n/* harmony export */   playSound: () => (/* binding */ playSound)\n/* harmony export */ });\nconst generatePhotoId = ()=>{\n    return \"photo-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n};\nconst downloadImage = (dataUrl, filename)=>{\n    const link = document.createElement(\"a\");\n    link.href = dataUrl;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n};\nconst createPhotoStrip = async (photos, theme)=>{\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    // Print-ready dimensions: 2x6 inches at 300 DPI\n    // 2 inches wide × 300 DPI = 600px\n    // 6 inches tall × 300 DPI = 1800px\n    const printWidth = 600; // 2 inches at 300 DPI\n    const printHeight = 1800; // 6 inches at 300 DPI\n    const blackBorder = 60; // Black border around edge (0.2 inches)\n    const padding = 10; // Space between photos\n    const bleedAmount = 3; // Edge bleeding/overflow amount\n    // Calculate photo dimensions maintaining 4:3 aspect ratio\n    const photoWidth = printWidth - blackBorder * 2; // Full available width\n    const totalPadding = (photos.length - 1) * padding;\n    const availableHeight = printHeight - blackBorder * 2 - totalPadding;\n    const photoHeight = availableHeight / photos.length; // Equal height for each photo\n    // Maintain 4:3 aspect ratio (most camera photos)\n    const aspectRatio = 4 / 3;\n    let finalPhotoWidth = photoWidth;\n    let finalPhotoHeight = photoWidth / aspectRatio;\n    // If photo height exceeds available space, scale down\n    if (finalPhotoHeight > photoHeight) {\n        finalPhotoHeight = photoHeight;\n        finalPhotoWidth = photoHeight * aspectRatio;\n    }\n    // Center photos horizontally within the width\n    const photoStartX = blackBorder + (photoWidth - finalPhotoWidth) / 2;\n    canvas.width = printWidth;\n    canvas.height = printHeight;\n    // Black background (film strip look) - completely black\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // Draw photos with edge bleeding effect\n    for(let i = 0; i < photos.length; i++){\n        const img = new Image();\n        img.src = photos[i].dataUrl;\n        await new Promise((resolve)=>{\n            img.onload = ()=>{\n                // Calculate position for this photo\n                const x = photoStartX;\n                const y = blackBorder + padding + i * (photoHeight + padding);\n                // Calculate source image crop to maintain aspect ratio\n                const imgAspectRatio = img.width / img.height;\n                const targetAspectRatio = finalPhotoWidth / finalPhotoHeight;\n                let sourceX = 0, sourceY = 0, sourceWidth = img.width, sourceHeight = img.height;\n                // Crop source image to match target aspect ratio\n                if (imgAspectRatio > targetAspectRatio) {\n                    // Source is wider - crop sides\n                    sourceWidth = img.height * targetAspectRatio;\n                    sourceX = (img.width - sourceWidth) / 2;\n                } else {\n                    // Source is taller - crop top/bottom\n                    sourceHeight = img.width / targetAspectRatio;\n                    sourceY = (img.height - sourceHeight) / 2;\n                }\n                // Draw photo with proper cropping\n                ctx.drawImage(img, sourceX, sourceY, sourceWidth, sourceHeight, x - bleedAmount, y - bleedAmount, finalPhotoWidth + bleedAmount * 2, finalPhotoHeight + bleedAmount * 2);\n                // Add edge blur/fade effect (vignette-like bleeding)\n                const blurGradient = ctx.createLinearGradient(x, y, x + finalPhotoWidth, y);\n                blurGradient.addColorStop(0, \"rgba(0, 0, 0, 0.15)\");\n                blurGradient.addColorStop(0.1, \"rgba(0, 0, 0, 0)\");\n                blurGradient.addColorStop(0.9, \"rgba(0, 0, 0, 0)\");\n                blurGradient.addColorStop(1, \"rgba(0, 0, 0, 0.15)\");\n                ctx.fillStyle = blurGradient;\n                ctx.fillRect(x, y, finalPhotoWidth, finalPhotoHeight);\n                // Add vertical edge blur\n                const verticalGradient = ctx.createLinearGradient(x, y, x, y + finalPhotoHeight);\n                verticalGradient.addColorStop(0, \"rgba(0, 0, 0, 0.1)\");\n                verticalGradient.addColorStop(0.08, \"rgba(0, 0, 0, 0)\");\n                verticalGradient.addColorStop(0.92, \"rgba(0, 0, 0, 0)\");\n                verticalGradient.addColorStop(1, \"rgba(0, 0, 0, 0.1)\");\n                ctx.fillStyle = verticalGradient;\n                ctx.fillRect(x, y, finalPhotoWidth, finalPhotoHeight);\n                resolve(null);\n            };\n        });\n    }\n    // Add date stamp at bottom\n    const date = new Date().toLocaleDateString();\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.font = \"16px monospace\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(date, canvas.width / 2, canvas.height - 20);\n    return canvas.toDataURL(\"image/png\");\n};\nconst playSound = (soundName)=>{\n    // Create audio context for sound effects\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    switch(soundName){\n        case \"shutter\":\n            // Simulate camera shutter sound\n            const oscillator = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n            oscillator.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n            oscillator.frequency.value = 1000;\n            gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);\n            oscillator.start(audioContext.currentTime);\n            oscillator.stop(audioContext.currentTime + 0.1);\n            break;\n        case \"countdown\":\n            // Simple beep for countdown\n            const beep = audioContext.createOscillator();\n            const beepGain = audioContext.createGain();\n            beep.connect(beepGain);\n            beepGain.connect(audioContext.destination);\n            beep.frequency.value = 800;\n            beepGain.gain.setValueAtTime(0.2, audioContext.currentTime);\n            beepGain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.05);\n            beep.start(audioContext.currentTime);\n            beep.stop(audioContext.currentTime + 0.05);\n            break;\n        case \"flash\":\n            // White noise burst for flash\n            const bufferSize = audioContext.sampleRate * 0.05;\n            const buffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate);\n            const output = buffer.getChannelData(0);\n            for(let i = 0; i < bufferSize; i++){\n                output[i] = Math.random() * 2 - 1;\n            }\n            const whiteNoise = audioContext.createBufferSource();\n            const noiseGain = audioContext.createGain();\n            whiteNoise.buffer = buffer;\n            whiteNoise.connect(noiseGain);\n            noiseGain.connect(audioContext.destination);\n            noiseGain.gain.setValueAtTime(0.1, audioContext.currentTime);\n            noiseGain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.05);\n            whiteNoise.start(audioContext.currentTime);\n            break;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils.ts\n"));

/***/ })

});